NAME: petclinic-chart
LAST DEPLOYED: Thu May  9 19:57:13 2024
NAMESPACE: default
STATUS: pending-install
REVISION: 1
TEST SUITE: None
USER-SUPPLIED VALUES:
containerPort: 8080
customers-db-mysql:
  auth:
    database: service_instance_db
  namespaceOverride: spring-petclinic
lifecycle:
  preStop:
    exec:
      command:
      - sh
      - -c
      - sleep 10
livenessProbe:
  httpGet:
    path: /actuator/health/liveness
    port: 8080
  initialDelaySeconds: 90
  periodSeconds: 5
namespace: spring-petclinic
readinessProbe:
  httpGet:
    path: /actuator/health/readiness
    port: 8080
  initialDelaySeconds: 15
replicaCount: 1
repositoryprefix: springcommunity
resources:
  limits:
    memory: 1Gi
  requests:
    cpu: 2000m
    memory: 1Gi
restartPolicy: Always
service:
  ports:
  - name: http
    port: 80
    targetPort: 8080
vets-db-mysql:
  auth:
    database: service_instance_db
  namespaceOverride: spring-petclinic
visits-db-mysql:
  auth:
    database: service_instance_db
  namespaceOverride: spring-petclinic

COMPUTED VALUES:
containerPort: 8080
customers-db-mysql:
  architecture: standalone
  auth:
    customPasswordFiles: {}
    database: service_instance_db
    existingSecret: ""
    password: ""
    replicationPassword: ""
    replicationUser: replicator
    rootPassword: ""
    usePasswordFiles: false
    username: ""
  clusterDomain: cluster.local
  common:
    exampleValue: common-chart
    global:
      imagePullSecrets: []
      imageRegistry: ""
      storageClass: ""
  commonAnnotations: {}
  commonLabels: {}
  diagnosticMode:
    args:
    - infinity
    command:
    - sleep
    enabled: false
  extraDeploy: []
  fullnameOverride: ""
  global:
    imagePullSecrets: []
    imageRegistry: ""
    storageClass: ""
  image:
    debug: false
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/mysql
    tag: 8.0.29-debian-10-r23
  initdbScripts: {}
  initdbScriptsConfigMap: ""
  kubeVersion: ""
  metrics:
    enabled: false
    extraArgs:
      primary: []
      secondary: []
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/mysqld-exporter
      tag: 0.14.0-debian-10-r75
    livenessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 120
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    prometheusRule:
      additionalLabels: {}
      enabled: false
      namespace: ""
      rules: []
    readinessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      limits: {}
      requests: {}
    service:
      annotations:
        prometheus.io/port: '{{ .Values.metrics.service.port }}'
        prometheus.io/scrape: "true"
      port: 9104
      type: ClusterIP
    serviceMonitor:
      annotations: {}
      enabled: false
      honorLabels: false
      interval: 30s
      jobLabel: ""
      labels: {}
      metricRelabelings: []
      namespace: ""
      relabelings: []
      scrapeTimeout: ""
      selector: {}
  nameOverride: ""
  namespaceOverride: spring-petclinic
  networkPolicy:
    allowExternal: true
    enabled: false
    explicitNamespacesSelector: {}
  primary:
    affinity: {}
    args: []
    command: []
    configuration: |-
      [mysqld]
      default_authentication_plugin=mysql_native_password
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mysql
      plugin_dir=/opt/bitnami/mysql/lib/plugin
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      datadir=/bitnami/mysql/data
      tmpdir=/opt/bitnami/mysql/tmp
      max_allowed_packet=16M
      bind-address=0.0.0.0
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
      log-error=/opt/bitnami/mysql/logs/mysqld.log
      character-set-server=UTF8
      collation-server=utf8_general_ci
      slow_query_log=0
      slow_query_log_file=/opt/bitnami/mysql/logs/mysqld.log
      long_query_time=10.0

      [client]
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      default-character-set=UTF8
      plugin_dir=/opt/bitnami/mysql/lib/plugin

      [manager]
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    existingConfigmap: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraFlags: ""
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    initContainers: []
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    pdb:
      create: false
      maxUnavailable: ""
      minAvailable: 1
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: true
      existingClaim: ""
      selector: {}
      size: 8Gi
      storageClass: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podManagementPolicy: ""
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      limits: {}
      requests: {}
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        mysql: ""
      ports:
        mysql: 3306
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    sidecars: []
    startupProbe:
      enabled: true
      failureThreshold: 10
      initialDelaySeconds: 15
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    terminationGracePeriodSeconds: ""
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      type: RollingUpdate
  rbac:
    create: false
    rules: []
  secondary:
    affinity: {}
    args: []
    command: []
    configuration: |-
      [mysqld]
      default_authentication_plugin=mysql_native_password
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mysql
      plugin_dir=/opt/bitnami/mysql/lib/plugin
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      datadir=/bitnami/mysql/data
      tmpdir=/opt/bitnami/mysql/tmp
      max_allowed_packet=16M
      bind-address=0.0.0.0
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
      log-error=/opt/bitnami/mysql/logs/mysqld.log
      character-set-server=UTF8
      collation-server=utf8_general_ci
      slow_query_log=0
      slow_query_log_file=/opt/bitnami/mysql/logs/mysqld.log
      long_query_time=10.0

      [client]
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      default-character-set=UTF8
      plugin_dir=/opt/bitnami/mysql/lib/plugin

      [manager]
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    existingConfigmap: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraFlags: ""
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    initContainers: []
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    pdb:
      create: false
      maxUnavailable: ""
      minAvailable: 1
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: true
      selector: {}
      size: 8Gi
      storageClass: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podManagementPolicy: ""
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    replicaCount: 1
    resources:
      limits: {}
      requests: {}
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        mysql: ""
      ports:
        mysql: 3306
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    sidecars: []
    startupProbe:
      enabled: true
      failureThreshold: 15
      initialDelaySeconds: 15
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    terminationGracePeriodSeconds: ""
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      type: RollingUpdate
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    name: ""
  volumePermissions:
    enabled: false
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 10-debian-10-r431
    resources: {}
lifecycle:
  preStop:
    exec:
      command:
      - sh
      - -c
      - sleep 10
livenessProbe:
  httpGet:
    path: /actuator/health/liveness
    port: 8080
  initialDelaySeconds: 90
  periodSeconds: 5
namespace: spring-petclinic
readinessProbe:
  httpGet:
    path: /actuator/health/readiness
    port: 8080
  initialDelaySeconds: 15
replicaCount: 1
repositoryprefix: springcommunity
resources:
  limits:
    memory: 1Gi
  requests:
    cpu: 2000m
    memory: 1Gi
restartPolicy: Always
service:
  ports:
  - name: http
    port: 80
    targetPort: 8080
vets-db-mysql:
  architecture: standalone
  auth:
    customPasswordFiles: {}
    database: service_instance_db
    existingSecret: ""
    password: ""
    replicationPassword: ""
    replicationUser: replicator
    rootPassword: ""
    usePasswordFiles: false
    username: ""
  clusterDomain: cluster.local
  common:
    exampleValue: common-chart
    global:
      imagePullSecrets: []
      imageRegistry: ""
      storageClass: ""
  commonAnnotations: {}
  commonLabels: {}
  diagnosticMode:
    args:
    - infinity
    command:
    - sleep
    enabled: false
  extraDeploy: []
  fullnameOverride: ""
  global:
    imagePullSecrets: []
    imageRegistry: ""
    storageClass: ""
  image:
    debug: false
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/mysql
    tag: 8.0.29-debian-10-r23
  initdbScripts: {}
  initdbScriptsConfigMap: ""
  kubeVersion: ""
  metrics:
    enabled: false
    extraArgs:
      primary: []
      secondary: []
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/mysqld-exporter
      tag: 0.14.0-debian-10-r75
    livenessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 120
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    prometheusRule:
      additionalLabels: {}
      enabled: false
      namespace: ""
      rules: []
    readinessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      limits: {}
      requests: {}
    service:
      annotations:
        prometheus.io/port: '{{ .Values.metrics.service.port }}'
        prometheus.io/scrape: "true"
      port: 9104
      type: ClusterIP
    serviceMonitor:
      annotations: {}
      enabled: false
      honorLabels: false
      interval: 30s
      jobLabel: ""
      labels: {}
      metricRelabelings: []
      namespace: ""
      relabelings: []
      scrapeTimeout: ""
      selector: {}
  nameOverride: ""
  namespaceOverride: spring-petclinic
  networkPolicy:
    allowExternal: true
    enabled: false
    explicitNamespacesSelector: {}
  primary:
    affinity: {}
    args: []
    command: []
    configuration: |-
      [mysqld]
      default_authentication_plugin=mysql_native_password
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mysql
      plugin_dir=/opt/bitnami/mysql/lib/plugin
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      datadir=/bitnami/mysql/data
      tmpdir=/opt/bitnami/mysql/tmp
      max_allowed_packet=16M
      bind-address=0.0.0.0
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
      log-error=/opt/bitnami/mysql/logs/mysqld.log
      character-set-server=UTF8
      collation-server=utf8_general_ci
      slow_query_log=0
      slow_query_log_file=/opt/bitnami/mysql/logs/mysqld.log
      long_query_time=10.0

      [client]
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      default-character-set=UTF8
      plugin_dir=/opt/bitnami/mysql/lib/plugin

      [manager]
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    existingConfigmap: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraFlags: ""
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    initContainers: []
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    pdb:
      create: false
      maxUnavailable: ""
      minAvailable: 1
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: true
      existingClaim: ""
      selector: {}
      size: 8Gi
      storageClass: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podManagementPolicy: ""
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      limits: {}
      requests: {}
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        mysql: ""
      ports:
        mysql: 3306
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    sidecars: []
    startupProbe:
      enabled: true
      failureThreshold: 10
      initialDelaySeconds: 15
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    terminationGracePeriodSeconds: ""
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      type: RollingUpdate
  rbac:
    create: false
    rules: []
  secondary:
    affinity: {}
    args: []
    command: []
    configuration: |-
      [mysqld]
      default_authentication_plugin=mysql_native_password
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mysql
      plugin_dir=/opt/bitnami/mysql/lib/plugin
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      datadir=/bitnami/mysql/data
      tmpdir=/opt/bitnami/mysql/tmp
      max_allowed_packet=16M
      bind-address=0.0.0.0
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
      log-error=/opt/bitnami/mysql/logs/mysqld.log
      character-set-server=UTF8
      collation-server=utf8_general_ci
      slow_query_log=0
      slow_query_log_file=/opt/bitnami/mysql/logs/mysqld.log
      long_query_time=10.0

      [client]
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      default-character-set=UTF8
      plugin_dir=/opt/bitnami/mysql/lib/plugin

      [manager]
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    existingConfigmap: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraFlags: ""
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    initContainers: []
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    pdb:
      create: false
      maxUnavailable: ""
      minAvailable: 1
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: true
      selector: {}
      size: 8Gi
      storageClass: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podManagementPolicy: ""
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    replicaCount: 1
    resources:
      limits: {}
      requests: {}
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        mysql: ""
      ports:
        mysql: 3306
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    sidecars: []
    startupProbe:
      enabled: true
      failureThreshold: 15
      initialDelaySeconds: 15
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    terminationGracePeriodSeconds: ""
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      type: RollingUpdate
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    name: ""
  volumePermissions:
    enabled: false
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 10-debian-10-r431
    resources: {}
visits-db-mysql:
  architecture: standalone
  auth:
    customPasswordFiles: {}
    database: service_instance_db
    existingSecret: ""
    password: ""
    replicationPassword: ""
    replicationUser: replicator
    rootPassword: ""
    usePasswordFiles: false
    username: ""
  clusterDomain: cluster.local
  common:
    exampleValue: common-chart
    global:
      imagePullSecrets: []
      imageRegistry: ""
      storageClass: ""
  commonAnnotations: {}
  commonLabels: {}
  diagnosticMode:
    args:
    - infinity
    command:
    - sleep
    enabled: false
  extraDeploy: []
  fullnameOverride: ""
  global:
    imagePullSecrets: []
    imageRegistry: ""
    storageClass: ""
  image:
    debug: false
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/mysql
    tag: 8.0.29-debian-10-r23
  initdbScripts: {}
  initdbScriptsConfigMap: ""
  kubeVersion: ""
  metrics:
    enabled: false
    extraArgs:
      primary: []
      secondary: []
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/mysqld-exporter
      tag: 0.14.0-debian-10-r75
    livenessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 120
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    prometheusRule:
      additionalLabels: {}
      enabled: false
      namespace: ""
      rules: []
    readinessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      limits: {}
      requests: {}
    service:
      annotations:
        prometheus.io/port: '{{ .Values.metrics.service.port }}'
        prometheus.io/scrape: "true"
      port: 9104
      type: ClusterIP
    serviceMonitor:
      annotations: {}
      enabled: false
      honorLabels: false
      interval: 30s
      jobLabel: ""
      labels: {}
      metricRelabelings: []
      namespace: ""
      relabelings: []
      scrapeTimeout: ""
      selector: {}
  nameOverride: ""
  namespaceOverride: spring-petclinic
  networkPolicy:
    allowExternal: true
    enabled: false
    explicitNamespacesSelector: {}
  primary:
    affinity: {}
    args: []
    command: []
    configuration: |-
      [mysqld]
      default_authentication_plugin=mysql_native_password
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mysql
      plugin_dir=/opt/bitnami/mysql/lib/plugin
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      datadir=/bitnami/mysql/data
      tmpdir=/opt/bitnami/mysql/tmp
      max_allowed_packet=16M
      bind-address=0.0.0.0
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
      log-error=/opt/bitnami/mysql/logs/mysqld.log
      character-set-server=UTF8
      collation-server=utf8_general_ci
      slow_query_log=0
      slow_query_log_file=/opt/bitnami/mysql/logs/mysqld.log
      long_query_time=10.0

      [client]
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      default-character-set=UTF8
      plugin_dir=/opt/bitnami/mysql/lib/plugin

      [manager]
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    existingConfigmap: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraFlags: ""
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    initContainers: []
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    pdb:
      create: false
      maxUnavailable: ""
      minAvailable: 1
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: true
      existingClaim: ""
      selector: {}
      size: 8Gi
      storageClass: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podManagementPolicy: ""
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      limits: {}
      requests: {}
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        mysql: ""
      ports:
        mysql: 3306
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    sidecars: []
    startupProbe:
      enabled: true
      failureThreshold: 10
      initialDelaySeconds: 15
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    terminationGracePeriodSeconds: ""
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      type: RollingUpdate
  rbac:
    create: false
    rules: []
  secondary:
    affinity: {}
    args: []
    command: []
    configuration: |-
      [mysqld]
      default_authentication_plugin=mysql_native_password
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mysql
      plugin_dir=/opt/bitnami/mysql/lib/plugin
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      datadir=/bitnami/mysql/data
      tmpdir=/opt/bitnami/mysql/tmp
      max_allowed_packet=16M
      bind-address=0.0.0.0
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
      log-error=/opt/bitnami/mysql/logs/mysqld.log
      character-set-server=UTF8
      collation-server=utf8_general_ci
      slow_query_log=0
      slow_query_log_file=/opt/bitnami/mysql/logs/mysqld.log
      long_query_time=10.0

      [client]
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      default-character-set=UTF8
      plugin_dir=/opt/bitnami/mysql/lib/plugin

      [manager]
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    existingConfigmap: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraFlags: ""
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    initContainers: []
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    pdb:
      create: false
      maxUnavailable: ""
      minAvailable: 1
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: true
      selector: {}
      size: 8Gi
      storageClass: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podManagementPolicy: ""
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    replicaCount: 1
    resources:
      limits: {}
      requests: {}
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        mysql: ""
      ports:
        mysql: 3306
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    sidecars: []
    startupProbe:
      enabled: true
      failureThreshold: 15
      initialDelaySeconds: 15
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    terminationGracePeriodSeconds: ""
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      type: RollingUpdate
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    name: ""
  volumePermissions:
    enabled: false
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 10-debian-10-r431
    resources: {}

HOOKS:
MANIFEST:
---
# Source: petclinic/templates/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: spring-petclinic
---
# Source: petclinic/charts/customers-db-mysql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: petclinic-chart-customers-db-mysql
  namespace: "spring-petclinic"
  labels:
    app.kubernetes.io/name: customers-db-mysql
    helm.sh/chart: customers-db-mysql-9.1.4
    app.kubernetes.io/instance: petclinic-chart
    app.kubernetes.io/managed-by: Helm
  annotations:
automountServiceAccountToken: true
secrets:
  - name: petclinic-chart-customers-db-mysql
---
# Source: petclinic/charts/vets-db-mysql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: petclinic-chart-vets-db-mysql
  namespace: "spring-petclinic"
  labels:
    app.kubernetes.io/name: vets-db-mysql
    helm.sh/chart: vets-db-mysql-9.1.4
    app.kubernetes.io/instance: petclinic-chart
    app.kubernetes.io/managed-by: Helm
  annotations:
automountServiceAccountToken: true
secrets:
  - name: petclinic-chart-vets-db-mysql
---
# Source: petclinic/charts/visits-db-mysql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: petclinic-chart-visits-db-mysql
  namespace: "spring-petclinic"
  labels:
    app.kubernetes.io/name: visits-db-mysql
    helm.sh/chart: visits-db-mysql-9.1.4
    app.kubernetes.io/instance: petclinic-chart
    app.kubernetes.io/managed-by: Helm
  annotations:
automountServiceAccountToken: true
secrets:
  - name: petclinic-chart-visits-db-mysql
---
# Source: petclinic/charts/customers-db-mysql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: petclinic-chart-customers-db-mysql
  namespace: "spring-petclinic"
  labels:
    app.kubernetes.io/name: customers-db-mysql
    helm.sh/chart: customers-db-mysql-9.1.4
    app.kubernetes.io/instance: petclinic-chart
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  mysql-root-password: "eEZWV0dpRU56Zw=="
  mysql-password: "aURMWXFZRXpYSw=="
---
# Source: petclinic/charts/vets-db-mysql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: petclinic-chart-vets-db-mysql
  namespace: "spring-petclinic"
  labels:
    app.kubernetes.io/name: vets-db-mysql
    helm.sh/chart: vets-db-mysql-9.1.4
    app.kubernetes.io/instance: petclinic-chart
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  mysql-root-password: "SDZlVDRZQnkzTg=="
  mysql-password: "OXVobDFsZWFoNw=="
---
# Source: petclinic/charts/visits-db-mysql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: petclinic-chart-visits-db-mysql
  namespace: "spring-petclinic"
  labels:
    app.kubernetes.io/name: visits-db-mysql
    helm.sh/chart: visits-db-mysql-9.1.4
    app.kubernetes.io/instance: petclinic-chart
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  mysql-root-password: "N2twSWxzckd0dQ=="
  mysql-password: "bWNHVTdTdUF6dg=="
---
# Source: petclinic/templates/wavefront-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: wavefront
  namespace: spring-petclinic
type: Opaque
data:
  wavefront-url: aHR0cHM6Ly93YXZlZnJvbnQuc3VyZg== 
  wavefront-api-token: ODk0ZTU0N2EtNjI0My00OGRhLThlNzgtMjAwOTBjOGUwNjUz
---
# Source: petclinic/charts/customers-db-mysql/templates/primary/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: petclinic-chart-customers-db-mysql
  namespace: "spring-petclinic"
  labels:
    app.kubernetes.io/name: customers-db-mysql
    helm.sh/chart: customers-db-mysql-9.1.4
    app.kubernetes.io/instance: petclinic-chart
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
data:
  my.cnf: |-
    [mysqld]
    default_authentication_plugin=mysql_native_password
    skip-name-resolve
    explicit_defaults_for_timestamp
    basedir=/opt/bitnami/mysql
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    datadir=/bitnami/mysql/data
    tmpdir=/opt/bitnami/mysql/tmp
    max_allowed_packet=16M
    bind-address=0.0.0.0
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
    log-error=/opt/bitnami/mysql/logs/mysqld.log
    character-set-server=UTF8
    collation-server=utf8_general_ci
    slow_query_log=0
    slow_query_log_file=/opt/bitnami/mysql/logs/mysqld.log
    long_query_time=10.0
    
    [client]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    default-character-set=UTF8
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    
    [manager]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
---
# Source: petclinic/charts/vets-db-mysql/templates/primary/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: petclinic-chart-vets-db-mysql
  namespace: "spring-petclinic"
  labels:
    app.kubernetes.io/name: vets-db-mysql
    helm.sh/chart: vets-db-mysql-9.1.4
    app.kubernetes.io/instance: petclinic-chart
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
data:
  my.cnf: |-
    [mysqld]
    default_authentication_plugin=mysql_native_password
    skip-name-resolve
    explicit_defaults_for_timestamp
    basedir=/opt/bitnami/mysql
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    datadir=/bitnami/mysql/data
    tmpdir=/opt/bitnami/mysql/tmp
    max_allowed_packet=16M
    bind-address=0.0.0.0
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
    log-error=/opt/bitnami/mysql/logs/mysqld.log
    character-set-server=UTF8
    collation-server=utf8_general_ci
    slow_query_log=0
    slow_query_log_file=/opt/bitnami/mysql/logs/mysqld.log
    long_query_time=10.0
    
    [client]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    default-character-set=UTF8
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    
    [manager]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
---
# Source: petclinic/charts/visits-db-mysql/templates/primary/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: petclinic-chart-visits-db-mysql
  namespace: "spring-petclinic"
  labels:
    app.kubernetes.io/name: visits-db-mysql
    helm.sh/chart: visits-db-mysql-9.1.4
    app.kubernetes.io/instance: petclinic-chart
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
data:
  my.cnf: |-
    [mysqld]
    default_authentication_plugin=mysql_native_password
    skip-name-resolve
    explicit_defaults_for_timestamp
    basedir=/opt/bitnami/mysql
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    datadir=/bitnami/mysql/data
    tmpdir=/opt/bitnami/mysql/tmp
    max_allowed_packet=16M
    bind-address=0.0.0.0
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
    log-error=/opt/bitnami/mysql/logs/mysqld.log
    character-set-server=UTF8
    collation-server=utf8_general_ci
    slow_query_log=0
    slow_query_log_file=/opt/bitnami/mysql/logs/mysqld.log
    long_query_time=10.0
    
    [client]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    default-character-set=UTF8
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    
    [manager]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
---
# Source: petclinic/templates/config-map.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: petclinic-config
  namespace: spring-petclinic
data:
  activeProfiles : kubernetes
  wavefrontUri: proxy://wavefront-proxy.spring-petclinic.svc.cluster.local:2878
  dsUsername: root 
  application.yaml: |-
    server:
      shutdown: graceful
      lifecycle:
        timeout-per-shutdown-phase: 15
      port: 8080
      compression:
        enabled: true
        mime-types: application/json,text/css,application/javascript
        min-response-size: 2048



    # Logging
    logging.level.org.springframework: INFO

    # Metrics
    management:
      endpoint:
        health:
          probes:
            enabled: true
      health:
        livenessState:
          enabled: true
        readinessState:
          enabled: true
        restart:
          enabled: true
        metrics:
          enabled: true
        prometheus:
          enabled: true
      endpoints:
        web:
          exposure:
            include: '*'
      metrics:
        export:
          prometheus:
            enabled: true


    customers-service-id: http://customers-service.spring-petclinic.svc.cluster.local:8080
    visits-service-id: http://vists-service.spring-petclinic.svc.cluster.local:8080

    spring:
      datasource:
        schema: classpath*:db/mysql/schema.sql
        data: classpath*:db/mysql/data.sql
        platform: mysql
        initialization-mode: always

      jpa:
        show-sql: true
        hibernate:
          ddl-auto: none
          generate-ddl: false
      sleuth:
        sampler:
          probability: 1.0
        config:
          # Allow the microservices to override the remote properties with their own System properties or config file
          allow-override: true
          # Override configuration with any local property source
          override-none: true
      messages:
        basename: messages/messages
      cloud:
        kubernetes:
          discovery:
            enabled: true
        loadbalancer:
          ribbon:
            enabled: false
        gateway:
          x-forwarded:  
            enabled: true 
            for-enabled: true 
            proto-enabled: true 
            host-append: false  
            port-append: false  
            proto-append: false
          routes:
            - id: vets-service
              uri: http://vets-service.spring-petclinic.svc.cluster.local:8080
              predicates:
                - Path=/api/vet/**
              filters:
                - StripPrefix=2
            - id: visits-service
              uri: http://visits-service.spring-petclinic.svc.cluster.local:8080
              predicates:
                - Path=/api/visit/**
              filters:
                - StripPrefix=2
            - id: customers-service
              uri: http://customers-service.spring-petclinic.svc.cluster.local:8080
              predicates:
                - Path=/api/customer/**
              filters:
                - StripPrefix=2
    vets:
      cache:
        ttl: 60
        heap-size: 101
---
# Source: petclinic/templates/role.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: spring-petclinic
  name: namespace-reader
rules:
  - apiGroups: ["", "extensions", "apps"]
    resources: ["configmaps", "pods", "services", "endpoints", "secrets"]
    verbs: ["get", "list", "watch"]
---
# Source: petclinic/templates/role.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: namespace-reader-binding
  namespace: spring-petclinic
subjects:
- kind: ServiceAccount
  name: default
  apiGroup: ""
roleRef:
  kind: Role
  name: namespace-reader
  apiGroup: ""
---
# Source: petclinic/charts/customers-db-mysql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: petclinic-chart-customers-db-mysql-headless
  namespace: "spring-petclinic"
  labels:
    app.kubernetes.io/name: customers-db-mysql
    helm.sh/chart: customers-db-mysql-9.1.4
    app.kubernetes.io/instance: petclinic-chart
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: mysql
      port: 3306
      targetPort: mysql
  selector: 
    app.kubernetes.io/name: customers-db-mysql
    app.kubernetes.io/instance: petclinic-chart
    app.kubernetes.io/component: primary
---
# Source: petclinic/charts/customers-db-mysql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: petclinic-chart-customers-db-mysql
  namespace: "spring-petclinic"
  labels:
    app.kubernetes.io/name: customers-db-mysql
    helm.sh/chart: customers-db-mysql-9.1.4
    app.kubernetes.io/instance: petclinic-chart
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: mysql
      nodePort: null
  selector: 
    app.kubernetes.io/name: customers-db-mysql
    app.kubernetes.io/instance: petclinic-chart
    app.kubernetes.io/component: primary
---
# Source: petclinic/charts/vets-db-mysql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: petclinic-chart-vets-db-mysql-headless
  namespace: "spring-petclinic"
  labels:
    app.kubernetes.io/name: vets-db-mysql
    helm.sh/chart: vets-db-mysql-9.1.4
    app.kubernetes.io/instance: petclinic-chart
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: mysql
      port: 3306
      targetPort: mysql
  selector: 
    app.kubernetes.io/name: vets-db-mysql
    app.kubernetes.io/instance: petclinic-chart
    app.kubernetes.io/component: primary
---
# Source: petclinic/charts/vets-db-mysql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: petclinic-chart-vets-db-mysql
  namespace: "spring-petclinic"
  labels:
    app.kubernetes.io/name: vets-db-mysql
    helm.sh/chart: vets-db-mysql-9.1.4
    app.kubernetes.io/instance: petclinic-chart
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: mysql
      nodePort: null
  selector: 
    app.kubernetes.io/name: vets-db-mysql
    app.kubernetes.io/instance: petclinic-chart
    app.kubernetes.io/component: primary
---
# Source: petclinic/charts/visits-db-mysql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: petclinic-chart-visits-db-mysql-headless
  namespace: "spring-petclinic"
  labels:
    app.kubernetes.io/name: visits-db-mysql
    helm.sh/chart: visits-db-mysql-9.1.4
    app.kubernetes.io/instance: petclinic-chart
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: mysql
      port: 3306
      targetPort: mysql
  selector: 
    app.kubernetes.io/name: visits-db-mysql
    app.kubernetes.io/instance: petclinic-chart
    app.kubernetes.io/component: primary
---
# Source: petclinic/charts/visits-db-mysql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: petclinic-chart-visits-db-mysql
  namespace: "spring-petclinic"
  labels:
    app.kubernetes.io/name: visits-db-mysql
    helm.sh/chart: visits-db-mysql-9.1.4
    app.kubernetes.io/instance: petclinic-chart
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: mysql
      nodePort: null
  selector: 
    app.kubernetes.io/name: visits-db-mysql
    app.kubernetes.io/instance: petclinic-chart
    app.kubernetes.io/component: primary
---
# Source: petclinic/templates/services/api-gateway-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: api-gateway-service
  name: api-gateway-service
  namespace: spring-petclinic
  
spec:
  ports:
  - name: http
    port: 80
    targetPort: 8080 
  selector:
    app: api-gateway
  type: LoadBalancer
---
# Source: petclinic/templates/services/customers-service-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: customers-service
  name: customers-service
  namespace: spring-petclinic
spec:
  ports:
  - name: http
    port: 80
    targetPort: 8080 
  selector:
    app: customers-service
---
# Source: petclinic/templates/services/vets-service-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: vets-service
  name: vets-service
  namespace: spring-petclinic
spec:
  ports:
  - name: http
    port: 80
    targetPort: 8080 
  selector:
    app: vets-service
---
# Source: petclinic/templates/services/visits-service-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: visits-service
  name: visits-service
  namespace: spring-petclinic 
spec:
  ports:
  - name: http
    port: 80
    targetPort: 8080 
  selector:
    app: visits-service
---
# Source: petclinic/templates/wavefront.yaml
apiVersion: v1
kind: Service
metadata:
  name: wavefront-proxy
  labels:
    app: wavefront-proxy
  namespace: spring-petclinic
spec:
  ports:
  - name: wavefront
    port: 2878
    protocol: TCP
  # Uncomment the below lines to consume Zipkin/Istio traces
  - name: http
    port: 9411
    targetPort: 9411
    protocol: TCP
  selector:
    app: wavefront-proxy
---
# Source: petclinic/templates/deployments/api-gateway-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: api-gateway-deploy
  name: api-gateway-deploy
  namespace: spring-petclinic
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
    spec:
      containers:
      - image: springcommunity/spring-petclinic-cloud-api-gateway:latest
        name: api-gateway
        imagePullPolicy: Always
        livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8080
            initialDelaySeconds: 90
            periodSeconds: 5
        readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8080
            initialDelaySeconds: 15
        lifecycle:
          preStop:
            exec:
              command:
              - sh
              - -c
              - sleep 10
        resources:
          limits:
            memory: 1Gi
          requests:
            cpu: 2000m
            memory: 1Gi        
        env:
        - name: SPRING_PROFILES_ACTIVE
          valueFrom: 
            configMapKeyRef: 
              name: petclinic-config
              key: activeProfiles

        - name: MANAGEMENT_METRICS_EXPORT_WAVEFRONT_URI
          valueFrom: 
            configMapKeyRef: 
              name: petclinic-config
              key: wavefrontUri
        ports:
        - containerPort: 8080 #8080            

      restartPolicy: Always
---
# Source: petclinic/templates/deployments/customers-service-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
  labels:
    app: customers-deploy
  name: customers-deploy
  namespace: spring-petclinic
spec:
  replicas: 1
  selector:
    matchLabels:
      app: customers-service
  template:
    metadata:
      labels:
        app: customers-service
    spec:
      containers:
      - image: springcommunity/spring-petclinic-cloud-customers-service:latest
        name: customers-service
        imagePullPolicy: Always
        livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8080
            initialDelaySeconds: 90
            periodSeconds: 5
        readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8080
            initialDelaySeconds: 15
        lifecycle:
          preStop:
            exec:
              command:
              - sh
              - -c
              - sleep 10
        resources:
          limits:
            memory: 1Gi
          requests:
            cpu: 2000m
            memory: 1Gi
        env:
        - name: SPRING_PROFILES_ACTIVE
          valueFrom: 
            configMapKeyRef: 
              name: petclinic-config
              key: activeProfiles

        - name: MANAGEMENT_METRICS_EXPORT_WAVEFRONT_URI
          valueFrom: 
            configMapKeyRef: 
              name: petclinic-config
              key: wavefrontUri

        - name: SPRING_DATASOURCE_URL
          value: jdbc:mysql://petclinic-chart-customers-db-mysql.spring-petclinic.svc.cluster.local:3306/service_instance_db?queryInterceptors=brave.mysql8.TracingQueryInterceptor&exceptionInterceptors=brave.mysql8.TracingExceptionInterceptor&zipkinServiceName=customers-db
       
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom: 
            configMapKeyRef: 
              name: petclinic-config
              key: dsUsername
              
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
             secretKeyRef:
               name: petclinic-chart-customers-db-mysql
               key: mysql-root-password

        ports:
        - containerPort: 8080 #8080  

      restartPolicy: Always
---
# Source: petclinic/templates/deployments/vets-service-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: vets-deploy
  name: vets-deploy
  namespace: spring-petclinic
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vets-service
  template:
    metadata:
      labels:
        app: vets-service
    spec:
      containers:
      - image: springcommunity/spring-petclinic-cloud-vets-service:latest
        name: vets-service
        imagePullPolicy: Always
        livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8080
            initialDelaySeconds: 90
            periodSeconds: 5
        readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8080
            initialDelaySeconds: 15
        lifecycle:
          preStop:
            exec:
              command:
              - sh
              - -c
              - sleep 10
        resources:
          limits:
            memory: 1Gi
          requests:
            cpu: 2000m
            memory: 1Gi
        env:
        - name: SPRING_PROFILES_ACTIVE
          valueFrom: 
            configMapKeyRef: 
              name: petclinic-config
              key: activeProfiles

        - name: MANAGEMENT_METRICS_EXPORT_WAVEFRONT_URI
          valueFrom: 
            configMapKeyRef: 
              name: petclinic-config
              key: wavefrontUri

        - name: SPRING_DATASOURCE_URL
          value: jdbc:mysql://petclinic-chart-vets-db-mysql.spring-petclinic.svc.cluster.local:3306/service_instance_db?queryInterceptors=brave.mysql8.TracingQueryInterceptor&exceptionInterceptors=brave.mysql8.TracingExceptionInterceptor&zipkinServiceName=vets-db
        
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom: 
            configMapKeyRef: 
              name: petclinic-config
              key: dsUsername
              
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
             secretKeyRef:
               name: petclinic-chart-vets-db-mysql
               key: mysql-root-password

        ports:
        - containerPort: 8080 # 8080   

      restartPolicy: Always
---
# Source: petclinic/templates/deployments/visits-service-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: visits-deploy
  name: visits-deploy
  namespace: spring-petclinic
spec:
  replicas: 1
  selector:
    matchLabels:
      app: visits-service
  template:
    metadata:
      labels:
        app: visits-service
    spec:
      containers:
      - image: springcommunity/spring-petclinic-cloud-visits-service:latest
        name: visits-service
        imagePullPolicy: Always
        livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8080
            initialDelaySeconds: 90
            periodSeconds: 5
        readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8080
            initialDelaySeconds: 15   
        lifecycle:
          preStop:
            exec:
              command:
              - sh
              - -c
              - sleep 10
        resources:
          limits:
            memory: 1Gi
          requests:
            cpu: 2000m
            memory: 1Gi
        env:
        - name: SPRING_PROFILES_ACTIVE
          valueFrom: 
            configMapKeyRef: 
              name: petclinic-config
              key: activeProfiles
        - name: MANAGEMENT_METRICS_EXPORT_WAVEFRONT_URI
          valueFrom: 
            configMapKeyRef: 
              name: petclinic-config
              key: wavefrontUri
        - name: SPRING_DATASOURCE_URL
          value: jdbc:mysql://petclinic-chart-visits-db-mysql.spring-petclinic.svc.cluster.local:3306/service_instance_db?queryInterceptors=brave.mysql8.TracingQueryInterceptor&exceptionInterceptors=brave.mysql8.TracingExceptionInterceptor&zipkinServiceName=visits-db
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom: 
            configMapKeyRef: 
              name: petclinic-config
              key: dsUsername
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
             secretKeyRef:
               name: petclinic-chart-visits-db-mysql
               key: mysql-root-password

        ports:
        - containerPort: 8080 #8080   

      restartPolicy: Always
---
# Source: petclinic/templates/wavefront.yaml
# Need to change YOUR_CLUSTER and YOUR_API_TOKEN accordingly

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: wavefront-proxy
    name: wavefront-proxy
  name: wavefront-proxy
  namespace: spring-petclinic
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wavefront-proxy
  template:
    metadata:
      labels:
        app: wavefront-proxy
    spec:
      containers:
      - name: wavefront-proxy
        image: wavefronthq/proxy:latest
        imagePullPolicy: Always
        env:
        - name: WAVEFRONT_URL
          valueFrom:
             secretKeyRef:
               name: wavefront
               key: wavefront-url
        - name: WAVEFRONT_TOKEN
          valueFrom:
             secretKeyRef:
               name: wavefront
               key: wavefront-api-token
        # Uncomment the below lines to consume Zipkin/Istio traces
        - name: WAVEFRONT_PROXY_ARGS
          value: --traceZipkinListenerPorts 9411 --traceZipkinApplicationName spring-petclinic-k8s
        ports:
        - containerPort: 2878
          protocol: TCP
        # Uncomment the below lines to consume Zipkin/Istio traces
        - containerPort: 9411
          protocol: TCP
        securityContext:
          privileged: false
---
# Source: petclinic/charts/customers-db-mysql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: petclinic-chart-customers-db-mysql
  namespace: "spring-petclinic"
  labels:
    app.kubernetes.io/name: customers-db-mysql
    helm.sh/chart: customers-db-mysql-9.1.4
    app.kubernetes.io/instance: petclinic-chart
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  podManagementPolicy: ""
  selector:
    matchLabels: 
      app.kubernetes.io/name: customers-db-mysql
      app.kubernetes.io/instance: petclinic-chart
      app.kubernetes.io/component: primary
  serviceName: petclinic-chart-customers-db-mysql
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configuration: 4ed350a7227425a7fd70990bb07e03dcb63af987be1717fb674a66d63b9ed8a0
      labels:
        app.kubernetes.io/name: customers-db-mysql
        helm.sh/chart: customers-db-mysql-9.1.4
        app.kubernetes.io/instance: petclinic-chart
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: petclinic-chart-customers-db-mysql
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: customers-db-mysql
                    app.kubernetes.io/instance: petclinic-chart
                    app.kubernetes.io/component: primary
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
      containers:
        - name: mysql
          image: docker.io/bitnami/mysql:8.0.29-debian-10-r23
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: petclinic-chart-customers-db-mysql
                  key: mysql-root-password
            - name: MYSQL_DATABASE
              value: "service_instance_db"
          envFrom:
          ports:
            - name: mysql
              containerPort: 3306
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          startupProbe:
            failureThreshold: 10
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          resources: 
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/mysql
            - name: config
              mountPath: /opt/bitnami/mysql/conf/my.cnf
              subPath: my.cnf
      volumes:
        - name: config
          configMap:
            name: petclinic-chart-customers-db-mysql
  volumeClaimTemplates:
    - metadata:
        name: data
        labels: 
          app.kubernetes.io/name: customers-db-mysql
          app.kubernetes.io/instance: petclinic-chart
          app.kubernetes.io/component: primary
        annotations:
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: petclinic/charts/vets-db-mysql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: petclinic-chart-vets-db-mysql
  namespace: "spring-petclinic"
  labels:
    app.kubernetes.io/name: vets-db-mysql
    helm.sh/chart: vets-db-mysql-9.1.4
    app.kubernetes.io/instance: petclinic-chart
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  podManagementPolicy: ""
  selector:
    matchLabels: 
      app.kubernetes.io/name: vets-db-mysql
      app.kubernetes.io/instance: petclinic-chart
      app.kubernetes.io/component: primary
  serviceName: petclinic-chart-vets-db-mysql
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configuration: ef48602dc5fc08d5e52332c4d5c907bfb77f45aed9ad8c5b2f8bf5275c2d6f99
      labels:
        app.kubernetes.io/name: vets-db-mysql
        helm.sh/chart: vets-db-mysql-9.1.4
        app.kubernetes.io/instance: petclinic-chart
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: petclinic-chart-vets-db-mysql
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: vets-db-mysql
                    app.kubernetes.io/instance: petclinic-chart
                    app.kubernetes.io/component: primary
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
      containers:
        - name: mysql
          image: docker.io/bitnami/mysql:8.0.29-debian-10-r23
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: petclinic-chart-vets-db-mysql
                  key: mysql-root-password
            - name: MYSQL_DATABASE
              value: "service_instance_db"
          envFrom:
          ports:
            - name: mysql
              containerPort: 3306
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          startupProbe:
            failureThreshold: 10
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          resources: 
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/mysql
            - name: config
              mountPath: /opt/bitnami/mysql/conf/my.cnf
              subPath: my.cnf
      volumes:
        - name: config
          configMap:
            name: petclinic-chart-vets-db-mysql
  volumeClaimTemplates:
    - metadata:
        name: data
        labels: 
          app.kubernetes.io/name: vets-db-mysql
          app.kubernetes.io/instance: petclinic-chart
          app.kubernetes.io/component: primary
        annotations:
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: petclinic/charts/visits-db-mysql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: petclinic-chart-visits-db-mysql
  namespace: "spring-petclinic"
  labels:
    app.kubernetes.io/name: visits-db-mysql
    helm.sh/chart: visits-db-mysql-9.1.4
    app.kubernetes.io/instance: petclinic-chart
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  podManagementPolicy: ""
  selector:
    matchLabels: 
      app.kubernetes.io/name: visits-db-mysql
      app.kubernetes.io/instance: petclinic-chart
      app.kubernetes.io/component: primary
  serviceName: petclinic-chart-visits-db-mysql
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configuration: 12e516c322bde7b1cf0dc5601015274e476e224fbf1fd9d6eaf29e742210bace
      labels:
        app.kubernetes.io/name: visits-db-mysql
        helm.sh/chart: visits-db-mysql-9.1.4
        app.kubernetes.io/instance: petclinic-chart
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: petclinic-chart-visits-db-mysql
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: visits-db-mysql
                    app.kubernetes.io/instance: petclinic-chart
                    app.kubernetes.io/component: primary
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
      containers:
        - name: mysql
          image: docker.io/bitnami/mysql:8.0.29-debian-10-r23
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: petclinic-chart-visits-db-mysql
                  key: mysql-root-password
            - name: MYSQL_DATABASE
              value: "service_instance_db"
          envFrom:
          ports:
            - name: mysql
              containerPort: 3306
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          startupProbe:
            failureThreshold: 10
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          resources: 
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/mysql
            - name: config
              mountPath: /opt/bitnami/mysql/conf/my.cnf
              subPath: my.cnf
      volumes:
        - name: config
          configMap:
            name: petclinic-chart-visits-db-mysql
  volumeClaimTemplates:
    - metadata:
        name: data
        labels: 
          app.kubernetes.io/name: visits-db-mysql
          app.kubernetes.io/instance: petclinic-chart
          app.kubernetes.io/component: primary
        annotations:
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"

